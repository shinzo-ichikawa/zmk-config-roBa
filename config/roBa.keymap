#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp LEFT_ALT>;
            key-positions = <13 12>;
        };

        shift_tab {
            bindings = <&kp TAB>;
            key-positions = <18 19>;
        };

        muhennkann {
            bindings = <&kp LC(INT_MUHENKAN)>;
            key-positions = <26 25>;
        };

        double_quotation {
            bindings = <&kp SEMI>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W        &kp E        &kp R       &kp T                                           &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A         &kp S        &kp D        &kp F       &kp G     &mkp MB2             &kp RIGHT_ARROW  &kp H        &kp J  &kp K      &kp L    &kp MINUS
&kp Z         &mt LC(X) X  &mt LC(C) C  &kp V       &kp B     &kp PRINTSCREEN      &kp LEFT_ARROW   &kp N        &kp M  &kp COMMA  &kp DOT  &mt LEFT_SHIFT QMARK
&kp LEFT_WIN  &kp LS(F8)   &kp LS(F7)   &kp LS(N5)  &mkp MB1  &lt 1 SPACE          &kp LC(SPACE)    &lt 2 ENTER                             &mt LEFT_CONTROL CLCK
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        FUNCTION {
            bindings = <
&kp ESC          &kp LS(N7)        &kp LS(N8)  &kp LS(N9)        &trans                            &trans  &kp F7  &kp F8  &kp F4  &kp PSCRN
&trans           &kp LS(N4)        &kp LS(N5)  &kp LS(NUMBER_6)  &trans        &trans      &trans  &trans  &kp F4  &kp F5  &kp F6  &trans
&kp LA(LC(DEL))  &kp LS(NUMBER_1)  &kp LS(N2)  &kp LS(NUMBER_3)  &kp QUESTION  &trans      &trans  &trans  &kp F1  &kp F2  &kp F3  &kp LS(DEL)
&trans           &trans            &trans      &trans            &trans        &trans      &trans  &trans                          &trans
            >;
        };

        NUM {
            bindings = <
&kp PLUS      &kp NUMBER_7  &kp N8        &kp NUMBER_9  &kp MINUS                         &trans         &trans          &kp UP_ARROW    &trans           &trans
&kp ASTERISK  &kp N4        &kp N5        &kp NUMBER_6  &kp KP_SLASH  &trans      &trans  &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp DEL
&kp PERIOD    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL     &trans      &trans  &trans         &trans          &trans          &trans           &trans
&trans        &trans        &trans        &trans        &trans        &trans      &trans  &trans                                                          &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
